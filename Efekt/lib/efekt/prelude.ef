var not = fn a { if a then false else true }
var or = fn a, b { if a then true else { if b then true else false } }
var and = fn a, b { if a then { if b then true else false } else false }
var >= = fn a, b { not(a < b) }
var <= = fn a, b { a < b or a == b }
var > = fn a, b { not(a < b) and not(a == b) }
var printLine = fn a { print(a) print('\n') }

var arrayIterator = fn a {
    return new {
        var arr = a
        var position = 0 - 1
        let current = fn { at(arr, position) }
        let moveForward = fn {
            position = position + 1
            return position < count(arr)
        }
        /*var getForwardIterator = fn {
            return arr.arrayIterator()
        }*/
    }
}

var whereIterator = fn i, p {
    return new {
        var iterator = i
        var predicate = p
        let current = fn { i.current() }
        let moveForward = fn {
            var ok = false
            loop {
                ok = i.moveForward()
                if not(ok) then
                    return false
                if predicate(i.current()) then
                    return true
            }
        }
    }
}

var forEach = fn i, f {
    /*var i = iterable.getForwardIterator()*/
    loop {
        if not(i.moveForward()) then
            return
        f(i.current())
    }
}

var where = fn i, p {
    return whereIterator(i, p)
}

var assert = fn condition {
    if not(condition) then
        throw "assert is false"
}

var for = fn from, to, do {
    assert(from <= to)
    var i = from
    loop {
        do(i)
        if i == to then
            break
        i = i + 1
   }
}

