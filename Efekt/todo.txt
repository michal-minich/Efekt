!fix: typer tries to find common type with imported variable on usage of it, but cannot access env in lexical scope

nicer mesage on perser error "fn () { 5 }" should be "fn { 5 }"

specer: should add Obj(fieldName:Type) to common type on member access?
specer - add test after fn apply like fn a { var b = a() + 1 }

fix: declaring var in loop now fails with already declared
fix various crashes - (build on prelude/wrong paths?, not matching braces)
error: when loop does not have break or return statement inside (to prevent infinite loop)
error: validate usage of break and continue outside loop
error: validate inequal count of params and args
fix: parse member access and fn apply with multi line comment after dot lie a./*\n*/b()

tokenizer - make \0 in middle of file invalid token or fatal
warn: when hiding variable in outer scope (file only?)
warn: when declaring variable of type void
info: when return can be skipped
import candidates - nicer output with location
info: import - print info when importing the same module in inner scope
warn: import - warn on duplicate import in same scope
info: when there is no need to crate new fn and name is enough, like fn a { print(a) }
info: when var can be let

tests for import
static validation where possible
nicer code

elements holds its tokens
prog runtime writter output (for throw)

how to reolve nested module names vs paths
resolve imports based on lib folder?
project config file? (instaed of cmd args)

enforce (optionally) readonly func parameters. how?
lock - transform mutable value to immutalbe (objects)
not operator - how?
more and thought out builtins
Double type
interators
? label goto
public attribute
attributes in general?
? ref
? function overloading (introduces polymorphism and introspection)
? contracts: requires, ensures, assert, assume, invariant (scope, loop, fn body, object body)

allow only typed functions to be called as extensions
builtins as extension methods (when typing for builtins is done)

convert to JS, D, C#